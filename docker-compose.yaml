services:
  letslive_backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: letslive_backend
    ports:
      - "8000:8000"
    environment:
      POSTGRES_HOST: letslive_database
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: lets-live
      POSTGRES_PORT: 5432
    volumes:
      - ./backend/docker/generated/private:/usr/local/bin/private
      - ./backend/docker/generated/public:/usr/local/bin/public
    depends_on:
      letslive_database:
        condition: service_healthy

  letslive_database:
    image: postgres:16.3
    container_name: letslive_db
    shm_size: 128mb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: lets-live
    volumes:
      - ./docker-entrypoint-initdb:/docker-entrypoint-initdb.d/
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 5s
      retries: 5

  letslive_ui:
    build:
      context: ./ui
      dockerfile: Dockerfile
    container_name: letslive_ui
    ports:
      - "5000:5000"
    depends_on:
      - letslive_backend

  # serve the ipfs content using the bootstrap node (node has an http route to get files)
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "8888:80"  # Expose Nginx on port 80 to access externally
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf  # Use a custom Nginx config
    networks:
      ipfs_network:
        ipv4_address: 10.5.0.10

  ipfs_bootstrap:
    build:
      context: ./ipfs-impl
      dockerfile: Dockerfile
    container_name: ipfs_bootstrap
    command: ["/usr/local/bin/app", "-b"] # run as bootstrap node
    ports:
      - "4001:4001"
      - "5001:5001"
      - "8080:8080"
    expose:
      - "4001"
    networks:
      ipfs-network:
        ipv4_address: 10.5.0.2
        aliases:
          - ipfs_bootstrap_node

  #### Use the command below to get the bootstrap ip on host, then replace it with "127.0.0.1" or just set it static like me
  #### docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}'
  
  ipfs_node_1:
    build:
      context: ./ipfs-impl
      dockerfile: Dockerfile
    container_name: ipfs_node_1
    # change the address to reflex to yours
    command: ["/usr/local/bin/app", "-a", "/ip4/10.5.0.2/tcp/4001/p2p/QmSHeyuLfNPnfG5S1JfJcgxPsVQ23u3JYWnRyYm4vkLGJb"]
    networks:
      ipfs-network:
        #ipv4_address: 10.5.0.3
        aliases:
          - ipfs_bootstrap_node
    expose:
      - "4001"
    depends_on:
      - ipfs_bootstrap

  ipfs_node_1:
    build:
      context: ./ipfs-impl
      dockerfile: Dockerfile
    container_name: ipfs_node_1
    # change the address to reflex to yours
    command: ["/usr/local/bin/app", "-a", "/ip4/10.5.0.2/tcp/4001/p2p/QmSHeyuLfNPnfG5S1JfJcgxPsVQ23u3JYWnRyYm4vkLGJb"]
    networks:
      ipfs-network:
        #ipv4_address: 10.5.0.3
        aliases:
          - ipfs_bootstrap_node
    expose:
      - "4001"
    depends_on:
      - ipfs_bootstrap

  ipfs_node_2:
    build:
      context: ./ipfs-impl
      dockerfile: Dockerfile
    container_name: ipfs_node_2
    # change the address to reflex to yours
    command: ["/usr/local/bin/app", "-a", "/ip4/10.5.0.2/tcp/4001/p2p/QmSHeyuLfNPnfG5S1JfJcgxPsVQ23u3JYWnRyYm4vkLGJb"]
    networks:
      ipfs-network:
        #ipv4_address: 10.5.0.4
        aliases:
          - ipfs_bootstrap_node
    expose:
      - "4001"
    depends_on:
      - ipfs_bootstrap


networks:
  ipfs-network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.5.0.0/16

volumes:
  postgres_data:
